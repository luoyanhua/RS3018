C51 COMPILER V9.54   TIMER                                                                 02/20/2022 16:48:15 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\list\timer.obj
COMPILER INVOKED BY: D:\keil\keil_MDK\C51\BIN\C51.EXE timer.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\list\t
                    -imer.lst) TABS(2) OBJECT(.\list\timer.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
  11          /*---------------------------------------------------------------------*/
  12          
  13          /*************  功能说明  **************
  14          
  15          本文件为STC8系列的定时器初始化和中断程序,用户可以在这个文件中修改自己需要的中断程序.
  16          
  17          ******************************************/
  18          
  19          #include "timer.h"
  20          #include "Beep.h"
  21          
  22          #define PLUS_MAX 12 //定义输出脉冲数
  23          
  24          bit plusOutFlag = 0;      //输出波形标志
  25          unsigned char plusOutCnt = 0; //80K中断计数
  26          
  27          unsigned int recvPlusTimerCnt = 0;
  28          
  29          /********************* Timer0中断函数************************/
  30          void timer0_int(void) interrupt TIMER0_VECTOR
  31          {
  32   1      
  33   1        recvPlusTimerCnt++;
  34   1      
  35   1        //每次调用输出MAX个脉冲
  36   1        if (plusOutFlag == 0)
  37   1          return;
  38   1        plusOutCnt++;
  39   1        if (plusOutCnt >= (PLUS_MAX * 2))
  40   1        {
  41   2          plusOutCnt = 0;
  42   2          plusOutFlag = 0;
  43   2        }
  44   1        else
  45   1        {
  46   2          P11 = ~P11;
  47   2        }
  48   1      }
  49          
  50          void Start_SendPlus(void)
  51          {
  52   1        plusOutFlag = 1;
  53   1      }
  54          
C51 COMPILER V9.54   TIMER                                                                 02/20/2022 16:48:15 PAGE 2   

  55          bit Get_plusOutFlag(void)
  56          {
  57   1        return plusOutFlag;
  58   1      }
  59          
  60          unsigned int Get_RecvPlusTimerCnt(void) //单位12.5us
  61          {
  62   1        return recvPlusTimerCnt;
  63   1      }
  64          
  65          unsigned int halfMsCnt = 0;
  66          /********************* Timer1中断函数************************/
  67          void timer1_int(void) interrupt TIMER1_VECTOR
  68          {
  69   1        halfMsCnt++;
  70   1        //每次调用连续输出1KHz波形
  71   1        if (Get_beepAlarmFlag() == 0)
  72   1          return;
  73   1        P35 = ~P35;
  74   1      }
  75          
  76          unsigned int Get_SysHalfMsTick(void) //单位是0.5ms
  77          {
  78   1        return halfMsCnt;
  79   1      }
  80          
  81          unsigned int get_time_escape_sec(unsigned int ticks_now, unsigned int ticks_old)
  82          {
  83   1        return ((ticks_now - ticks_old) & 0xffffffff);
  84   1      }
  85          
  86          //========================================================================
  87          // 函数: unsigned char  Timer_Inilize(unsigned char TIM, TIM_InitTypeDef *TIMx)
  88          // 描述: 定时器初始化程序.
  89          // 参数: TIMx: 结构参数,请参考timer.h里的定义.
  90          // 返回: 成功返回0, 空操作返回1,错误返回2.
  91          // 版本: V1.0, 2012-10-22
  92          //========================================================================
  93          unsigned char Timer_Inilize(unsigned char TIM, TIM_InitTypeDef *TIMx)
  94          {
  95   1        if (TIM == Timer0)
  96   1        {
  97   2          Timer0_Stop(); //停止计数
  98   2          if (TIMx->TIM_Interrupt == ENABLE)
  99   2            Timer0_InterruptEnable(); //允许中断
 100   2          else
 101   2            Timer0_InterruptDisable(); //禁止中断
 102   2          if (TIMx->TIM_Priority > Priority_3)
 103   2            return 2;            //错误
 104   2          Timer0_Priority(TIMx->TIM_Priority); //指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_
             -3
 105   2      
 106   2          if (TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask)
 107   2            return 2;             //错误
 108   2          TMOD = (TMOD & ~0x30) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
 109   2          if (TIMx->TIM_ClkSource == TIM_CLOCK_12T)
 110   2            Timer0_12T(); //12T
 111   2          if (TIMx->TIM_ClkSource == TIM_CLOCK_1T)
 112   2            Timer0_1T(); //1T
 113   2          if (TIMx->TIM_ClkSource == TIM_CLOCK_Ext)
 114   2            Timer0_AsCounter(); //对外计数或分频
 115   2          else
C51 COMPILER V9.54   TIMER                                                                 02/20/2022 16:48:15 PAGE 3   

 116   2            Timer0_AsTimer(); //定时
 117   2          if (TIMx->TIM_ClkOut == ENABLE)
 118   2            Timer0_CLKO_Enable(); //输出时钟
 119   2          else
 120   2            Timer0_CLKO_Disable(); //不输出时钟
 121   2      
 122   2          T0_Load(TIMx->TIM_Value);
 123   2          if (TIMx->TIM_Run == ENABLE)
 124   2            Timer0_Run(); //开始运行
 125   2          return 0;     //成功
 126   2        }
 127   1      
 128   1        if (TIM == Timer1)
 129   1        {
 130   2          Timer1_Stop(); //停止计数
 131   2          if (TIMx->TIM_Interrupt == ENABLE)
 132   2            Timer1_InterruptEnable(); //允许中断
 133   2          else
 134   2            Timer1_InterruptDisable(); //禁止中断
 135   2          if (TIMx->TIM_Priority > Priority_3)
 136   2            return 2;            //错误
 137   2          Timer1_Priority(TIMx->TIM_Priority); //指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_
             -3
 138   2          if (TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask)
 139   2            return 2;             //错误
 140   2          TMOD = (TMOD & ~0x30) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
 141   2          if (TIMx->TIM_ClkSource == TIM_CLOCK_12T)
 142   2            Timer1_12T(); //12T
 143   2          if (TIMx->TIM_ClkSource == TIM_CLOCK_1T)
 144   2            Timer1_1T(); //1T
 145   2          if (TIMx->TIM_ClkSource == TIM_CLOCK_Ext)
 146   2            Timer1_AsCounter(); //对外计数或分频
 147   2          else
 148   2            Timer1_AsTimer(); //定时
 149   2          if (TIMx->TIM_ClkOut == ENABLE)
 150   2            Timer1_CLKO_Enable(); //输出时钟
 151   2          else
 152   2            Timer1_CLKO_Disable(); //不输出时钟
 153   2      
 154   2          T1_Load(TIMx->TIM_Value);
 155   2          if (TIMx->TIM_Run == ENABLE)
 156   2            Timer1_Run(); //开始运行
 157   2          return 0;     //成功
 158   2        }
 159   1        return 2; //错误
 160   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    504    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
