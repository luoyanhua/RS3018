C51 COMPILER V9.54   TIMER                                                                 04/16/2022 12:05:24 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\list\timer.obj
COMPILER INVOKED BY: D:\keil\keil_C51\C51\BIN\C51.EXE timer.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\list\t
                    -imer.lst) OBJECT(.\list\timer.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
  11          /*---------------------------------------------------------------------*/
  12          
  13          /*************  功能说明        **************
  14          
  15          本文件为STC8系列的定时器初始化和中断程序,用户可以在这个文件中修改自己需要的中断程序.
  16          
  17          ******************************************/
  18          
  19          #include "timer.h"
  20          #include "Beep.h"
  21          
  22          #define PLUS_MAX 24 //定义输出脉冲数
  23          
  24          bit plusOutFlag = 0;              //输出波形标志
  25          bit firstIntFlag = 0;
  26          unsigned char plusOutCnt = 0; // 80K中断计数
  27          
  28          unsigned int recvPlusTimerCnt = 0;
  29          
  30          unsigned char plusAdjustState = 0;
  31          
  32          unsigned int halfMsCnt = 0;
  33          
  34          unsigned int us_250Cnt = 0;
  35          
  36          void PlusAdjust(void)
  37          {
  38   1              switch (plusAdjustState)
  39   1              {
  40   2              case 0:
  41   2                      P36 = 1;
  42   2                      plusAdjustState = 1;
  43   2                      break;
  44   2              case 1:
  45   2                      if (plusOutCnt > PLUS_MAX )
  46   2                      {
  47   3                              plusOutFlag = 0;
  48   3                              Timer0_InterruptDisable(); //禁止中断
  49   3                      }
  50   2                      else
  51   2                      {
  52   3                              P36 = ~P36;
  53   3                      }
  54   2                      break;
C51 COMPILER V9.54   TIMER                                                                 04/16/2022 12:05:24 PAGE 2   

  55   2              default:
  56   2                      break;
  57   2              }
  58   1      }
  59          
  60          void Start_SendPlus(void)
  61          {
  62   1              plusOutFlag = 1;
  63   1              plusOutCnt = 0;
  64   1              plusAdjustState = 0;
  65   1              Timer0_InterruptEnable(); //允许中断
  66   1      }
  67          
  68          bit Get_plusOutFlag(void)
  69          {
  70   1              return plusOutFlag;
  71   1      }
  72          
  73          unsigned int Get_RecvPlusTimerCnt(void) //单位12.5us
  74          {
  75   1              return recvPlusTimerCnt;
  76   1      }
  77          
  78          unsigned int Get_us_250Cnt(void)
  79          {
  80   1              return us_250Cnt;
  81   1      }
  82          
  83          unsigned int Get_SysHalfMsTick(void) //单位是0.5ms
  84          {
  85   1              return halfMsCnt;
  86   1      }
  87          
  88          unsigned int get_time_escape_sec(unsigned int ticks_now, unsigned int ticks_old)
  89          {
  90   1              return ((ticks_now - ticks_old) & 0xffffffff);
  91   1      }
  92          
  93          /********************* Timer0中断函数************************/
  94          void timer0_int(void) interrupt TIMER0_VECTOR
  95          {
  96   1              recvPlusTimerCnt++;
  97   1              
  98   1              //每次调用输出MAX个脉冲
  99   1              if (plusOutFlag == 1)
 100   1              {
 101   2                      plusOutCnt++;
 102   2                      PlusAdjust();
 103   2              }
 104   1      }
 105          
 106          
 107          
 108          /********************* Timer1中断函数************************/
 109          void timer1_int(void) interrupt TIMER1_VECTOR
 110          {
 111   1              us_250Cnt++;
 112   1              if(firstIntFlag == 0)
 113   1              {
 114   2                      firstIntFlag = 1;
 115   2                      halfMsCnt++;
 116   2                      if (Get_beepAlarmFlag() == 1)
C51 COMPILER V9.54   TIMER                                                                 04/16/2022 12:05:24 PAGE 3   

 117   2                      {
 118   3                              P35 = ~P35;
 119   3                      }
 120   2                      else
 121   2                      {
 122   3                              P35 = 0;
 123   3                      }
 124   2              }
 125   1              else
 126   1              {
 127   2                      firstIntFlag = 0;
 128   2              }
 129   1      }
 130          
 131          //========================================================================
 132          // 函数: unsigned char  Timer_Inilize(unsigned char TIM, TIM_InitTypeDef *TIMx)
 133          // 描述: 定时器初始化程序.
 134          // 参数: TIMx: 结构参数,请参考timer.h里的定义.
 135          // 返回: 成功返回0, 空操作返回1,错误返回2.
 136          // 版本: V1.0, 2012-10-22
 137          //========================================================================
 138          unsigned char Timer_Inilize(unsigned char TIM, TIM_InitTypeDef *TIMx)
 139          {
 140   1              if (TIM == Timer0)
 141   1              {
 142   2                      Timer0_Stop(); //停止计数
 143   2                      if (TIMx->TIM_Interrupt == ENABLE)
 144   2                              Timer0_InterruptEnable(); //允许中断
 145   2                      else
 146   2                              Timer0_InterruptDisable(); //禁止中断
 147   2                      if (TIMx->TIM_Priority > Priority_3)
 148   2                              return 2;                                                //错误
 149   2                      Timer0_Priority(TIMx->TIM_Priority); //指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_
             -3
 150   2      
 151   2                      if (TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask)
 152   2                              return 2;                                                       //错误
 153   2                      TMOD = (TMOD & ~0x30) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
 154   2                      if (TIMx->TIM_ClkSource == TIM_CLOCK_12T)
 155   2                              Timer0_12T(); // 12T
 156   2                      if (TIMx->TIM_ClkSource == TIM_CLOCK_1T)
 157   2                              Timer0_1T(); // 1T
 158   2                      if (TIMx->TIM_ClkSource == TIM_CLOCK_Ext)
 159   2                              Timer0_AsCounter(); //对外计数或分频
 160   2                      else
 161   2                              Timer0_AsTimer(); //定时
 162   2                      if (TIMx->TIM_ClkOut == ENABLE)
 163   2                              Timer0_CLKO_Enable(); //输出时钟
 164   2                      else
 165   2                              Timer0_CLKO_Disable(); //不输出时钟
 166   2      
 167   2                      T0_Load(TIMx->TIM_Value);
 168   2                      if (TIMx->TIM_Run == ENABLE)
 169   2                              Timer0_Run(); //开始运行
 170   2                      return 0;                 //成功
 171   2              }
 172   1              if (TIM == Timer1)
 173   1              {
 174   2                      Timer1_Stop(); //停止计数
 175   2                      if (TIMx->TIM_Interrupt == ENABLE)
 176   2                              Timer1_InterruptEnable(); //允许中断
 177   2                      else
C51 COMPILER V9.54   TIMER                                                                 04/16/2022 12:05:24 PAGE 4   

 178   2                              Timer1_InterruptDisable(); //禁止中断
 179   2                      if (TIMx->TIM_Priority > Priority_3)
 180   2                              return 2;                                                //错误
 181   2                      Timer1_Priority(TIMx->TIM_Priority); //指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_
             -3
 182   2                      if (TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask)
 183   2                              return 2;                                                       //错误
 184   2                      TMOD = (TMOD & ~0x30) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
 185   2                      if (TIMx->TIM_ClkSource == TIM_CLOCK_12T)
 186   2                              Timer1_12T(); // 12T
 187   2                      if (TIMx->TIM_ClkSource == TIM_CLOCK_1T)
 188   2                              Timer1_1T(); // 1T
 189   2                      if (TIMx->TIM_ClkSource == TIM_CLOCK_Ext)
 190   2                              Timer1_AsCounter(); //对外计数或分频
 191   2                      else
 192   2                              Timer1_AsTimer(); //定时
 193   2                      if (TIMx->TIM_ClkOut == ENABLE)
 194   2                              Timer1_CLKO_Enable(); //输出时钟
 195   2                      else
 196   2                              Timer1_CLKO_Disable(); //不输出时钟
 197   2      
 198   2                      T1_Load(TIMx->TIM_Value);
 199   2                      if (TIMx->TIM_Run == ENABLE)
 200   2                              Timer1_Run(); //开始运行
 201   2                      return 0;                 //成功
 202   2              }
 203   1              return 2; //错误
 204   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    553    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
