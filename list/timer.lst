C51 COMPILER V9.54   TIMER                                                                 05/19/2022 21:29:15 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\list\timer.obj
COMPILER INVOKED BY: D:\keil\keil_C51\C51\BIN\C51.EXE timer.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\list\t
                    -imer.lst) OBJECT(.\list\timer.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
  11          /*---------------------------------------------------------------------*/
  12          
  13          /*************  功能说明        **************
  14          
  15          本文件为STC8系列的定时器初始化和中断程序,用户可以在这个文件中修改自己需要的中断程序.
  16          
  17          ******************************************/
  18          
  19          #include "timer.h"
  20          #include "Beep.h"
  21          
  22          #define PLUS_MAX 24 //定义输出脉冲数
  23          
  24          bit plusOutFlag = 0;              //输出波形标志
  25          bit firstIntFlag = 0;
  26          bit firstBeepFlag = 0;
  27          unsigned char plusOutCnt = 0; // 80K中断计数
  28          
  29          unsigned int recvPlusTimerCnt = 0;
  30          
  31          unsigned char plusAdjustState = 0;
  32          
  33          unsigned int halfMsCnt = 0;
  34          
  35          unsigned int us_250Cnt = 0;
  36          
  37          void PlusAdjust(void)
  38          {
  39   1              switch (plusAdjustState)
  40   1              {
  41   2              case 0:
  42   2                      P36 = 1;
  43   2                      plusAdjustState = 1;
  44   2                      break;
  45   2              case 1:
  46   2                      if (plusOutCnt > PLUS_MAX )
  47   2                      {
  48   3                              plusOutFlag = 0;
  49   3                              Timer0_InterruptDisable(); //禁止中断
  50   3                      }
  51   2                      else
  52   2                      {
  53   3                              P36 = ~P36;
  54   3                      }
C51 COMPILER V9.54   TIMER                                                                 05/19/2022 21:29:15 PAGE 2   

  55   2                      break;
  56   2              default:
  57   2                      break;
  58   2              }
  59   1      }
  60          
  61          void Start_SendPlus(void)
  62          {
  63   1              plusOutFlag = 1;
  64   1              plusOutCnt = 0;
  65   1              plusAdjustState = 0;
  66   1              Timer0_InterruptEnable(); //允许中断
  67   1      }
  68          
  69          bit Get_plusOutFlag(void)
  70          {
  71   1              return plusOutFlag;
  72   1      }
  73          
  74          unsigned int Get_RecvPlusTimerCnt(void) //单位12.5us
  75          {
  76   1              return recvPlusTimerCnt;
  77   1      }
  78          
  79          unsigned int Get_us_250Cnt(void)
  80          {
  81   1              return us_250Cnt;
  82   1      }
  83          
  84          unsigned int Get_SysHalfMsTick(void) //单位是0.5ms
  85          {
  86   1              return halfMsCnt;
  87   1      }
  88          
  89          unsigned int get_time_escape_sec(unsigned int ticks_now, unsigned int ticks_old)
  90          {
  91   1              return ((ticks_now - ticks_old) & 0xffffffff);
  92   1      }
  93          
  94          /********************* Timer0中断函数************************/
  95          void timer0_int(void) interrupt TIMER0_VECTOR
  96          {
  97   1              recvPlusTimerCnt++;
  98   1              
  99   1              //每次调用输出MAX个脉冲
 100   1              if (plusOutFlag == 1)
 101   1              {
 102   2                      plusOutCnt++;
 103   2                      PlusAdjust();
 104   2              }
 105   1      }
 106          
 107          
 108          
 109          /********************* Timer1中断函数************************/
 110          void timer1_int(void) interrupt TIMER1_VECTOR
 111          {
 112   1              us_250Cnt++;
 113   1              if(firstIntFlag == 0)
 114   1              {
 115   2                      firstIntFlag = 1;
 116   2                      halfMsCnt++;
C51 COMPILER V9.54   TIMER                                                                 05/19/2022 21:29:15 PAGE 3   

 117   2                      if (Get_beepAlarmRunFlag() == 1)
 118   2                      {
 119   3                              P35 = ~P35;
 120   3                      }
 121   2              }
 122   1              else
 123   1              {
 124   2                      firstIntFlag = 0;
 125   2              }
 126   1      }
 127          
 128          //========================================================================
 129          // 函数: unsigned char  Timer_Inilize(unsigned char TIM, TIM_InitTypeDef *TIMx)
 130          // 描述: 定时器初始化程序.
 131          // 参数: TIMx: 结构参数,请参考timer.h里的定义.
 132          // 返回: 成功返回0, 空操作返回1,错误返回2.
 133          // 版本: V1.0, 2012-10-22
 134          //========================================================================
 135          unsigned char Timer_Inilize(unsigned char TIM, TIM_InitTypeDef *TIMx)
 136          {
 137   1              if (TIM == Timer0)
 138   1              {
 139   2                      Timer0_Stop(); //停止计数
 140   2                      if (TIMx->TIM_Interrupt == ENABLE)
 141   2                              Timer0_InterruptEnable(); //允许中断
 142   2                      else
 143   2                              Timer0_InterruptDisable(); //禁止中断
 144   2                      if (TIMx->TIM_Priority > Priority_3)
 145   2                              return 2;                                                //错误
 146   2                      Timer0_Priority(TIMx->TIM_Priority); //指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_
             -3
 147   2      
 148   2                      if (TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask)
 149   2                              return 2;                                                       //错误
 150   2                      TMOD = (TMOD & ~0x30) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
 151   2                      if (TIMx->TIM_ClkSource == TIM_CLOCK_12T)
 152   2                              Timer0_12T(); // 12T
 153   2                      if (TIMx->TIM_ClkSource == TIM_CLOCK_1T)
 154   2                              Timer0_1T(); // 1T
 155   2                      if (TIMx->TIM_ClkSource == TIM_CLOCK_Ext)
 156   2                              Timer0_AsCounter(); //对外计数或分频
 157   2                      else
 158   2                              Timer0_AsTimer(); //定时
 159   2                      if (TIMx->TIM_ClkOut == ENABLE)
 160   2                              Timer0_CLKO_Enable(); //输出时钟
 161   2                      else
 162   2                              Timer0_CLKO_Disable(); //不输出时钟
 163   2      
 164   2                      T0_Load(TIMx->TIM_Value);
 165   2                      if (TIMx->TIM_Run == ENABLE)
 166   2                              Timer0_Run(); //开始运行
 167   2                      return 0;                 //成功
 168   2              }
 169   1              if (TIM == Timer1)
 170   1              {
 171   2                      Timer1_Stop(); //停止计数
 172   2                      if (TIMx->TIM_Interrupt == ENABLE)
 173   2                              Timer1_InterruptEnable(); //允许中断
 174   2                      else
 175   2                              Timer1_InterruptDisable(); //禁止中断
 176   2                      if (TIMx->TIM_Priority > Priority_3)
 177   2                              return 2;                                                //错误
C51 COMPILER V9.54   TIMER                                                                 05/19/2022 21:29:15 PAGE 4   

 178   2                      Timer1_Priority(TIMx->TIM_Priority); //指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority_
             -3
 179   2                      if (TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask)
 180   2                              return 2;                                                       //错误
 181   2                      TMOD = (TMOD & ~0x30) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
 182   2                      if (TIMx->TIM_ClkSource == TIM_CLOCK_12T)
 183   2                              Timer1_12T(); // 12T
 184   2                      if (TIMx->TIM_ClkSource == TIM_CLOCK_1T)
 185   2                              Timer1_1T(); // 1T
 186   2                      if (TIMx->TIM_ClkSource == TIM_CLOCK_Ext)
 187   2                              Timer1_AsCounter(); //对外计数或分频
 188   2                      else
 189   2                              Timer1_AsTimer(); //定时
 190   2                      if (TIMx->TIM_ClkOut == ENABLE)
 191   2                              Timer1_CLKO_Enable(); //输出时钟
 192   2                      else
 193   2                              Timer1_CLKO_Disable(); //不输出时钟
 194   2      
 195   2                      T1_Load(TIMx->TIM_Value);
 196   2                      if (TIMx->TIM_Run == ENABLE)
 197   2                              Timer1_Run(); //开始运行
 198   2                      return 0;                 //成功
 199   2              }
 200   1              return 2; //错误
 201   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    549    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
