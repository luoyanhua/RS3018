C51 COMPILER V9.54   UART                                                                  04/23/2022 08:59:35 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\list\UART.obj
COMPILER INVOKED BY: D:\keil\keil_C51\C51\BIN\C51.EXE UART.C OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\list\UA
                    -RT.lst) OBJECT(.\list\UART.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
  11          /*---------------------------------------------------------------------*/
  12          
  13          #include "Task.h"
  14          #include "timer.h"
  15          #include "Beep.h"
  16          #include "Task.h"
  17          #include "Sensor.h"
  18          #include "delay.h"
  19          #include "UART.h"
  20          #include <string.h>
  21          
  22          unsigned char xdata txBuf[14];
  23          unsigned char xdata rxbuf[COM_RX2_Lenth];
  24          unsigned char rxlen = 0;
  25          
  26          COMx_Define COM2;
  27          u8 xdata TX2_Buffer[COM_TX2_Lenth]; //发送缓冲
  28          u8 xdata RX2_Buffer[COM_RX2_Lenth]; //接收缓冲
  29          
  30          u8 UART_Configuration(u8 UARTx, COMx_InitDefine *COMx)
  31          {
  32   1              u8 i;
  33   1              u32 j;
  34   1      
  35   1              if (UARTx == UART2)
  36   1              {
  37   2                      COM2.id = 2;
  38   2                      COM2.TX_read = 0;
  39   2                      COM2.TX_write = 0;
  40   2                      COM2.B_TX_busy = 0;
  41   2                      COM2.RX_Cnt = 0;
  42   2                      COM2.RX_TimeOut = 0;
  43   2                      COM2.B_RX_OK = 0;
  44   2                      for (i = 0; i < COM_TX2_Lenth; i++)
  45   2                              TX2_Buffer[i] = 0;
  46   2                      for (i = 0; i < COM_RX2_Lenth; i++)
  47   2                              RX2_Buffer[i] = 0;
  48   2      
  49   2                      if ((COMx->UART_Mode == UART_9bit_BRTx) || (COMx->UART_Mode == UART_8bit_BRTx)) //可变波特率
  50   2                      {
  51   3                              if (COMx->UART_Priority > Priority_3)
  52   3                                      return 2;                                                //错误
  53   3                              UART2_Priority(COMx->UART_Priority); //指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,Priority
             -_3
C51 COMPILER V9.54   UART                                                                  04/23/2022 08:59:35 PAGE 2   

  54   3                              if (COMx->UART_Mode == UART_9bit_BRTx)
  55   3                                      S2CON |= (1 << 7); // 9bit
  56   3                              else
  57   3                                      S2CON &= ~(1 << 7);                                        // 8bit
  58   3                              j = (MAIN_Fosc / 4) / COMx->UART_BaudRate; //按1T计算
  59   3                              if (j >= 65536UL)
  60   3                                      return 2; //错误
  61   3                              j = 65536UL - j;
  62   3                              AUXR &= ~(1 << 4); // Timer stop
  63   3                              AUXR &= ~(1 << 3); // Timer2 set As Timer
  64   3                              AUXR |= (1 << 2);  // Timer2 set as 1T mode
  65   3                              TH2 = (u8)(j >> 8);
  66   3                              TL2 = (u8)j;
  67   3                              IE2 &= ~(1 << 2); //禁止中断
  68   3                              AUXR |= (1 << 4); // Timer run enable
  69   3                      }
  70   2                      else
  71   2                              return 2; //模式错误
  72   2                      if (COMx->UART_Interrupt == ENABLE)
  73   2                              IE2 |= 1; //允许中断
  74   2                      else
  75   2                              IE2 &= ~1; //禁止中断
  76   2                      if (COMx->UART_RxEnable == ENABLE)
  77   2                              S2CON |= (1 << 4); //允许接收
  78   2                      else
  79   2                              S2CON &= ~(1 << 4);                                                      //禁止接收
  80   2                      P_SW2 = (P_SW2 & ~1) | (COMx->UART_P_SW & 0x01); //切换IO
  81   2                      return 0;
  82   2              }
  83   1              return 2; //错误
  84   1      }
  85          
  86          /*********************************************************/
  87          
  88          void UART2_int(void) interrupt UART2_VECTOR
  89          {
  90   1              if (RI2)
  91   1              {
  92   2                      CLR_RI2();
  93   2                      if (COM2.B_RX_OK == 0)
  94   2                      {
  95   3                              if (COM2.RX_Cnt >= COM_RX2_Lenth)
  96   3                                      COM2.RX_Cnt = 0;
  97   3                              RX2_Buffer[COM2.RX_Cnt++] = S2BUF;
  98   3                              COM2.RX_TimeOut = TimeOutSet2;
  99   3                      }
 100   2              }
 101   1      
 102   1              if (TI2)
 103   1              {
 104   2                      CLR_TI2();
 105   2                      if (COM2.TX_read != COM2.TX_write)
 106   2                      {
 107   3                              S2BUF = TX2_Buffer[COM2.TX_read];
 108   3                              if (++COM2.TX_read >= COM_TX2_Lenth)
 109   3                                      COM2.TX_read = 0;
 110   3                      }
 111   2                      else
 112   2                              COM2.B_TX_busy = 0;
 113   2              }
 114   1      }
 115          
C51 COMPILER V9.54   UART                                                                  04/23/2022 08:59:35 PAGE 3   

 116          /********************* UART2 函数 ************************/
 117          void TX2_write2buff(u8 dat) //写入发送缓冲，指针+1
 118          {
 119   1              TX2_Buffer[COM2.TX_write] = dat; //装发送缓冲
 120   1              if (++COM2.TX_write >= COM_TX2_Lenth)
 121   1                      COM2.TX_write = 0;
 122   1      
 123   1              if (COM2.B_TX_busy == 0) //空闲
 124   1              {
 125   2                      COM2.B_TX_busy = 1; //标志忙
 126   2                      SET_TI2();                      //触发发送中断
 127   2              }
 128   1      }
 129          
 130          void VirtualCOM_StringSend(unsigned char *str)
 131          {
 132   1              //    while (*str != 0)
 133   1              //    {
 134   1              //        TX2_write2buff(*str);
 135   1              //        str++;
 136   1              //    }
 137   1      }
*** WARNING C280 IN LINE 130 OF UART.C: 'str': unreferenced local variable
 138          
 139          //清除接收缓存
 140          void clrRX2_Buffer(void)
 141          {
 142   1              COM2.RX_Cnt = 0;
 143   1              COM2.RX_TimeOut = 0;
 144   1              COM2.B_RX_OK = 0;
 145   1              memset(RX2_Buffer, 0, COM_TX2_Lenth);
 146   1      }
 147          
 148          //获取接收到的数据 0:未收到有效数据
 149          unsigned char getRxBuf(void)
 150          {
 151   1              rxlen = COM2.RX_Cnt;
 152   1              if (rxlen == 4 || rxlen == 5) //目前只有两种协议
 153   1              {
 154   2                      memcpy(rxbuf, RX2_Buffer, rxlen);
 155   2                      return rxlen;
 156   2              }
 157   1              else
 158   1                      return 0;
 159   1      }
 160          
 161          void uartSendBuf(unsigned char *buf, unsigned char len)
 162          {
 163   1              unsigned char i = 0;
 164   1              for (i = 0; i < len; i++)
 165   1              {
 166   2                      TX2_write2buff(buf[i]);
 167   2              }
 168   1      }
 169          
 170          void sensorReplyPackage(unsigned char ch, unsigned char cmd)
 171          {
 172   1              unsigned char temp_txLen = 0;
 173   1              if(cmd == CMD_ID)
 174   1              {
 175   2                      txBuf[0] = 0xBB;
 176   2                      txBuf[1] = cmd;
C51 COMPILER V9.54   UART                                                                  04/23/2022 08:59:35 PAGE 4   

 177   2                      txBuf[2] = ch;
 178   2                      txBuf[3] = 0xBF;
 179   2                      temp_txLen = 4;
 180   2              }
 181   1              else
 182   1              {
 183   2                      txBuf[0] = 0xBB;
 184   2                      txBuf[1] = cmd;
 185   2                      txBuf[2] = ch;
 186   2                      txBuf[3] = Get_meterDistance()/10;
 187   2                      txBuf[4] = 0xBF;        
 188   2                      temp_txLen = 5; 
 189   2              }
 190   1              uartSendBuf(txBuf,temp_txLen);
 191   1      }
 192          
 193          unsigned char saveTotalSensorDistance[SENSOR_NUM_MAX] = {0}; //顺序分别代表：左，左中，右中，右
 194          
 195          // cmd 0:右传感器循环获取其他传感器位置信息 1:右传感器循环获取其他传感器距离信息
 196          // ch 根据宏定义来
 197          void getSensorImfo(unsigned char ch, unsigned char cmd)
 198          {
 199   1              txBuf[0] = 0xBB;
 200   1              txBuf[1] = cmd;
 201   1              txBuf[2] = ch;
 202   1              txBuf[3] = 0xBF;
 203   1              uartSendBuf(txBuf, 3);
 204   1      }
 205          
 206          //接收数据解析函数
 207          // buf:接收数据指针
 208          // len:接收数据长度
 209          //格式：BB + cmd + ch + distance(BYTE) + BF
 210          unsigned char analysisSensorImfo(void)
 211          {
 212   1              unsigned char result = 0;
 213   1              if (get_currentSensorID() == RIGHT_SENSOR)
 214   1              {
 215   2                      if (rxbuf[1] == CMD_ID)
 216   2                      {
 217   3                              if (rxbuf[2] == LEFT_SENSOR)
 218   3                              {
 219   4                                      result = 1;//传感器存在
 220   4                              }
 221   3                              else if (rxbuf[2] == LEFT_MID_SENSOR)
 222   3                              {
 223   4                                      result = 1;//传感器存在
 224   4                              }
 225   3                              else if (rxbuf[2] == RIGHT_MID_SENSOR)
 226   3                              {
 227   4                                      result = 1;//传感器存在
 228   4                              }
 229   3                      }
 230   2                      else
 231   2                      {
 232   3                              if (rxbuf[2] == LEFT_SENSOR)
 233   3                              {
 234   4                                      saveTotalSensorDistance[0] = rxbuf[3] ;
 235   4                                      result = 1;//解析距离
 236   4                              }
 237   3                              else if (rxbuf[2] == LEFT_MID_SENSOR)
 238   3                              {
C51 COMPILER V9.54   UART                                                                  04/23/2022 08:59:35 PAGE 5   

 239   4                                      saveTotalSensorDistance[1] = rxbuf[3] ;
 240   4                                      result = 1;//解析距离
 241   4                              }
 242   3                              else if (rxbuf[2] == RIGHT_MID_SENSOR)
 243   3                              {
 244   4                                      saveTotalSensorDistance[2] = rxbuf[3] ;
 245   4                                      result = 1;//解析距离
 246   4                              }
 247   3                      }
 248   2              }
 249   1              else
 250   1              {
 251   2                      if (rxbuf[1] == CMD_ID)
 252   2                      {
 253   3                              if (rxbuf[2] == get_currentSensorID()) //判断收到的信息是否需要回复，回复必须传感器号对应
 254   3                              {
 255   4                                      sensorReplyPackage(rxbuf[2] ,rxbuf[1]);
 256   4                                      result = 1;//传感器存在，需要回复信息
 257   4                              }
 258   3                      }
 259   2                      else
 260   2                      {
 261   3                              if (rxbuf[2] == get_currentSensorID()) //判断收到的信息是否需要回复，回复必须传感器号对应
 262   3                              {
 263   4                                      sensorReplyPackage(rxbuf[2] ,rxbuf[1]);
 264   4                                      result = 1;//需要回复距离信息
 265   4                              }
 266   3                      }
 267   2              }
 268   1              return result;
 269   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    793    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    110    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
