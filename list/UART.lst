C51 COMPILER V9.54   UART                                                                  05/28/2022 11:17:27 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\list\UART.obj
COMPILER INVOKED BY: D:\keil\keil_C51\C51\BIN\C51.EXE UART.C OPTIMIZE(3,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\list\UA
                    -RT.lst) OBJECT(.\list\UART.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* Èç¹ûÒªÔÚ³ÌÐòÖÐÊ¹ÓÃ´Ë´úÂë,ÇëÔÚ³ÌÐòÖÐ×¢Ã÷Ê¹ÓÃÁËSTCµÄ×ÊÁÏ¼°³ÌÐò            */
  11          /*---------------------------------------------------------------------*/
  12          
  13          #include "Task.h"
  14          #include "timer.h"
  15          #include "Beep.h"
  16          #include "Task.h"
  17          #include "Sensor.h"
  18          #include "delay.h"
  19          #include "UART.h"
  20          #include <string.h>
  21          
  22          unsigned char xdata txBuf[14];
  23          unsigned char xdata rxbuf[COM_RX2_Lenth];
  24          unsigned char rxlen = 0;
  25          
  26          COMx_Define COM2;
  27          u8 xdata TX2_Buffer[COM_TX2_Lenth]; //·¢ËÍ»º³å
  28          u8 xdata RX2_Buffer[COM_RX2_Lenth]; //½ÓÊÕ»º³å
  29          
  30          u8 UART_Configuration(u8 UARTx, COMx_InitDefine *COMx)
  31          {
  32   1              u8 i;
  33   1              u32 j;
  34   1      
  35   1              if (UARTx == UART2)
  36   1              {
  37   2                      COM2.id = 2;
  38   2                      COM2.TX_read = 0;
  39   2                      COM2.TX_write = 0;
  40   2                      COM2.B_TX_busy = 0;
  41   2                      COM2.RX_Cnt = 0;
  42   2                      COM2.RX_TimeOut = 0;
  43   2                      COM2.B_RX_OK = 0;
  44   2                      for (i = 0; i < COM_TX2_Lenth; i++)
  45   2                              TX2_Buffer[i] = 0;
  46   2                      for (i = 0; i < COM_RX2_Lenth; i++)
  47   2                              RX2_Buffer[i] = 0;
  48   2      
  49   2                      if ((COMx->UART_Mode == UART_9bit_BRTx) || (COMx->UART_Mode == UART_8bit_BRTx)) //¿É±ä²¨ÌØÂÊ
  50   2                      {
  51   3                              if (COMx->UART_Priority > Priority_3)
  52   3                                      return 2;                                                //´íÎó
  53   3                              UART2_Priority(COMx->UART_Priority); //Ö¸¶¨ÖÐ¶ÏÓÅÏÈ¼¶(µÍµ½¸ß) Priority_0,Priority_1,Priority_2,Priority
             -_3
C51 COMPILER V9.54   UART                                                                  05/28/2022 11:17:27 PAGE 2   

  54   3                              if (COMx->UART_Mode == UART_9bit_BRTx)
  55   3                                      S2CON |= (1 << 7); // 9bit
  56   3                              else
  57   3                                      S2CON &= ~(1 << 7);                                        // 8bit
  58   3                              j = (MAIN_Fosc / 4) / COMx->UART_BaudRate; //°´1T¼ÆËã
  59   3                              if (j >= 65536UL)
  60   3                                      return 2; //´íÎó
  61   3                              j = 65536UL - j;
  62   3                              AUXR &= ~(1 << 4); // Timer stop
  63   3                              AUXR &= ~(1 << 3); // Timer2 set As Timer
  64   3                              AUXR |= (1 << 2);  // Timer2 set as 1T mode
  65   3                              TH2 = (u8)(j >> 8);
  66   3                              TL2 = (u8)j;
  67   3                              IE2 &= ~(1 << 2); //½ûÖ¹ÖÐ¶Ï
  68   3                              AUXR |= (1 << 4); // Timer run enable
  69   3                      }
  70   2                      else
  71   2                              return 2; //Ä£Ê½´íÎó
  72   2                      if (COMx->UART_Interrupt == ENABLE)
  73   2                              IE2 |= 1; //ÔÊÐíÖÐ¶Ï
  74   2                      else
  75   2                              IE2 &= ~1; //½ûÖ¹ÖÐ¶Ï
  76   2                      if (COMx->UART_RxEnable == ENABLE)
  77   2                              S2CON |= (1 << 4); //ÔÊÐí½ÓÊÕ
  78   2                      else
  79   2                              S2CON &= ~(1 << 4);                                                      //½ûÖ¹½ÓÊÕ
  80   2                      P_SW2 = (P_SW2 & ~1) | (COMx->UART_P_SW & 0x01); //ÇÐ»»IO
  81   2                      return 0;
  82   2              }
  83   1              return 2; //´íÎó
  84   1      }
  85          
  86          /*********************************************************/
  87          
  88          void UART2_int(void) interrupt UART2_VECTOR
  89          {
  90   1              if (RI2)
  91   1              {
  92   2                      CLR_RI2();
  93   2                      if (COM2.B_RX_OK == 0)
  94   2                      {
  95   3                              if (COM2.RX_Cnt >= COM_RX2_Lenth)
  96   3                                      COM2.RX_Cnt = 0;
  97   3                              RX2_Buffer[COM2.RX_Cnt++] = S2BUF;
  98   3                      }
  99   2              }
 100   1      
 101   1              if (TI2)
 102   1              {
 103   2                      CLR_TI2();
 104   2                      COM2.B_TX_busy = 0;
 105   2              }
 106   1      }
 107          
 108          /********************* UART2 º¯Êý ************************/
 109          void TX2_write2buff(u8 dat) //Ð´Èë·¢ËÍ»º³å£¬Ö¸Õë+1
 110          {
 111   1      
 112   1              while (COM2.B_TX_busy)
 113   1              {
 114   2              };
 115   1              COM2.B_TX_busy = 1; //±êÖ¾Ã¦
C51 COMPILER V9.54   UART                                                                  05/28/2022 11:17:27 PAGE 3   

 116   1              S2BUF = dat;            //×°·¢ËÍ»º³å
 117   1              CLR_TI2();
 118   1      }
 119          
 120          void VirtualCOM_StringSend(unsigned char *str)
 121          {
 122   1      }
*** WARNING C280 IN LINE 120 OF UART.C: 'str': unreferenced local variable
 123          
 124          /***************  ´®¿Ú³õÊ¼»¯º¯Êý *****************/
 125          void UART_config(void)
 126          {
 127   1              COMx_InitDefine COMx_InitStructure;                              //½á¹¹¶¨Òå
 128   1              COMx_InitStructure.UART_Mode = UART_8bit_BRTx;   //Ä£Ê½,   UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART_9
             -bit_BRTx
 129   1                                                                                                               //     COMx_InitStructure.UART_BRT_Use   = BRT_Timer2;                 //Ñ¡Ôñ²¨ÌØÂÊ·¢ÉúÆ÷, BRT_Timer2 (×¢Òâ: ´
             -®¿Ú2¹Ì¶¨Ê¹ÓÃBRT_Timer2, ËùÒÔ²»ÓÃÑ¡Ôñ)
 130   1              COMx_InitStructure.UART_BaudRate = 115200ul;     //²¨ÌØÂÊ,     110 ~ 115200
 131   1              COMx_InitStructure.UART_RxEnable = ENABLE;               //½ÓÊÕÔÊÐí,   ENABLE»òDISABLE
 132   1              COMx_InitStructure.UART_Interrupt = ENABLE;              //ÖÐ¶ÏÔÊÐí,   ENABLE»òDISABLE
 133   1              COMx_InitStructure.UART_Priority = Priority_0;   //Ö¸¶¨ÖÐ¶ÏÓÅÏÈ¼¶(µÍµ½¸ß) Priority_0,Priority_1,Priority_2
             -,Priority_3
 134   1              COMx_InitStructure.UART_P_SW = UART2_SW_P10_P11; //ÇÐ»»¶Ë¿Ú,   UART2_SW_P10_P11,UART2_SW_P46_P47
 135   1              UART_Configuration(UART2, &COMx_InitStructure);  //³õÊ¼»¯´®¿Ú2 UART1,UART2,UART3,UART4
 136   1      
 137   1              UART_CHG_IO = UART_RX_EN;
 138   1      }
 139          
 140          unsigned char rxPackageStartPos = 0;
 141          unsigned char rxPackageEndPos = 0;
 142          bit rxPackageFlag = 0;
 143          
 144          //Çå³ý½ÓÊÕ»º´æ
 145          void clrRX2_Buffer(void)
 146          {
 147   1              rxPackageFlag = 0;
 148   1              COM2.RX_Cnt = 0;
 149   1              COM2.B_RX_OK = 0;
 150   1              memset(RX2_Buffer, 0, COM_TX2_Lenth);
 151   1      }
 152          
 153          void uartBuffRxTask(void)
 154          {
 155   1              unsigned char lenTemp = 0;
 156   1              if (COM2.RX_Cnt == 0)
 157   1                      return;
 158   1              if (rxPackageFlag == 0)
 159   1              {
 160   2                      if (RX2_Buffer[COM2.RX_Cnt - 1] == 0xBB || RX2_Buffer[COM2.RX_Cnt - 1] == 0xEE)
 161   2                      {
 162   3                              rxPackageStartPos = COM2.RX_Cnt - 1;
 163   3                              rxPackageFlag = 1;
 164   3                      }
 165   2              }
 166   1              else
 167   1              {
 168   2                      if (RX2_Buffer[COM2.RX_Cnt - 1] == 0xBF)
 169   2                      {
 170   3                              rxPackageEndPos = COM2.RX_Cnt;
 171   3                              lenTemp = rxPackageEndPos - rxPackageStartPos;
 172   3                              memcpy(rxbuf, &RX2_Buffer[rxPackageStartPos], (rxPackageEndPos - rxPackageStartPos));
 173   3                              rxPackageFlag = 0;
C51 COMPILER V9.54   UART                                                                  05/28/2022 11:17:27 PAGE 4   

 174   3                              COM2.B_RX_OK = 1;
 175   3                      }
 176   2              }
 177   1      }
 178          
 179          //»ñÈ¡½ÓÊÕµ½µÄÊý¾Ý 0:Î´ÊÕµ½ÓÐÐ§Êý¾Ý
 180          unsigned char getRxBuf(void)
 181          {
 182   1              return COM2.B_RX_OK;
 183   1      }
 184          
 185          bit uartUsedFlag = 0;
 186          
 187          bit get_uartUsedFlag(void)
 188          {
 189   1              return uartUsedFlag;
 190   1      }
 191          
 192          void uartBuffSendTask(void)
 193          {
 194   1              if (Get_plusOutFlag() == 0) //±ÜÃâ´®¿ÚºÍ¸ßËÙ¶¨Ê±Æ÷Í¬Ê±¹¤×÷£¬Ó°Ïì´®¿ÚÊý¾Ý
 195   1              {
 196   2                      unsigned char i = 0;
 197   2                      if (COM2.TX_write == 0)
 198   2                              return;
 199   2                      uartUsedFlag = 1;
 200   2                      clrRX2_Buffer();
 201   2                      UART_CHG_IO = UART_TX_EN;
 202   2                      _nop_();
 203   2                      _nop_();
 204   2                      _nop_();
 205   2                      _nop_();
 206   2                      for (i = 0; i < COM2.TX_write; i++)
 207   2                      {
 208   3                              TX2_write2buff(TX2_Buffer[i]);
 209   3                      }
 210   2                      while (COM2.B_TX_busy)
 211   2                      {
 212   3                      };
 213   2                      _nop_();
 214   2                      _nop_();
 215   2                      _nop_();
 216   2                      _nop_();
 217   2                      COM2.TX_write = 0;
 218   2                      UART_CHG_IO = UART_RX_EN;
 219   2                      uartUsedFlag = 0;
 220   2              }
 221   1      }
 222          
 223          void uartSendBuf(unsigned char *buf, unsigned char len)
 224          {
 225   1              COM2.TX_write = 0;
 226   1              if (len == 0)
 227   1                      return;
 228   1              memcpy(TX2_Buffer, buf, len);
 229   1              COM2.TX_write = len;
 230   1      }
 231          
 232          unsigned char saveTotalSensorDistance[SENSOR_NUM_MAX] = {0}; //Ë³Ðò·Ö±ð´ú±í£º×ó£¬×óÖÐ£¬ÓÒÖÐ£¬ÓÒ
 233          
 234          unsigned char get_distanceLevel(unsigned char value)
 235          {
C51 COMPILER V9.54   UART                                                                  05/28/2022 11:17:27 PAGE 5   

 236   1              unsigned char temp_distanceLevel;
 237   1              if (value > 200)
 238   1              {
 239   2                      temp_distanceLevel = 5;
 240   2              }
 241   1              else if (value > 155)
 242   1              {
 243   2                      temp_distanceLevel = 4;
 244   2              }
 245   1              else if (value > 110)
 246   1              {
 247   2                      temp_distanceLevel = 3;
 248   2              }
 249   1              else if (value > 60)
 250   1              {
 251   2                      temp_distanceLevel = 2;
 252   2              }
 253   1              else
 254   1              {
 255   2                      temp_distanceLevel = 1;
 256   2              }
 257   1              return temp_distanceLevel;
 258   1      }
 259          
 260          void sensorTotalPackage(void)
 261          {
 262   1              txBuf[0] = 0xAA;
 263   1              txBuf[1] = 4;
 264   1              txBuf[2] = get_distanceLevel(saveTotalSensorDistance[0]);
 265   1              txBuf[3] = saveTotalSensorDistance[0];
 266   1              txBuf[4] = get_distanceLevel(saveTotalSensorDistance[1]);
 267   1              txBuf[5] = saveTotalSensorDistance[1];
 268   1              txBuf[6] = get_distanceLevel(saveTotalSensorDistance[2]);
 269   1              txBuf[7] = saveTotalSensorDistance[2];
 270   1              txBuf[8] = get_distanceLevel(Get_meterDistance() / 10);
 271   1              txBuf[9] = Get_meterDistance() / 10;
 272   1              txBuf[10] = 0xAF;
 273   1              uartSendBuf(txBuf, 11);
 274   1      }
 275          
 276          void sensorReplyPackage(unsigned char ch, unsigned char cmd)
 277          {
 278   1              unsigned char temp_txLen = 0;
 279   1              if (cmd == CMD_ID)
 280   1              {
 281   2                      txBuf[0] = 0xEE;
 282   2                      txBuf[1] = cmd;
 283   2                      txBuf[2] = ch;
 284   2                      txBuf[3] = 0xBF;
 285   2                      temp_txLen = 4;
 286   2              }
 287   1              else
 288   1              {
 289   2                      txBuf[0] = 0xEE;
 290   2                      txBuf[1] = cmd;
 291   2                      txBuf[2] = ch;
 292   2                      txBuf[3] = Get_meterDistance() / 10;
 293   2                      txBuf[4] = 0xBF;
 294   2                      temp_txLen = 5;
 295   2              }
 296   1              uartSendBuf(txBuf, temp_txLen);
 297   1      }
C51 COMPILER V9.54   UART                                                                  05/28/2022 11:17:27 PAGE 6   

 298          
 299          // cmd 0:ÓÒ´«¸ÐÆ÷Ñ­»·»ñÈ¡ÆäËû´«¸ÐÆ÷Î»ÖÃÐÅÏ¢ 1:ÓÒ´«¸ÐÆ÷Ñ­»·»ñÈ¡ÆäËû´«¸ÐÆ÷¾àÀëÐÅÏ¢
 300          // ch ¸ù¾Ýºê¶¨ÒåÀ´
 301          void getSensorImfo(unsigned char ch, unsigned char cmd)
 302          {
 303   1              txBuf[0] = 0xBB;
 304   1              txBuf[1] = cmd;
 305   1              txBuf[2] = ch;
 306   1              txBuf[3] = 0xBF;
 307   1              uartSendBuf(txBuf, 4);
 308   1      }
 309          
 310          //½ÓÊÕÊý¾Ý½âÎöº¯Êý
 311          // buf:½ÓÊÕÊý¾ÝÖ¸Õë
 312          // len:½ÓÊÕÊý¾Ý³¤¶È
 313          //¸ñÊ½£ºBB + cmd + ch + distance(BYTE) + BF
 314          unsigned char analysisSensorImfo(void)
 315          {
 316   1              unsigned char result = 0;
 317   1              if (getRxBuf() == 0)
 318   1                      return 0;
 319   1              COM2.B_RX_OK = 0;
 320   1      
 321   1              if (get_currentSensorID() == RIGHT_SENSOR)
 322   1              {
 323   2                      if (rxbuf[1] == CMD_ID)
 324   2                      {
 325   3                              if (rxbuf[2] == LEFT_SENSOR)
 326   3                              {
 327   4                                      result = 1; //´«¸ÐÆ÷´æÔÚ
 328   4                              }
 329   3                              else if (rxbuf[2] == LEFT_MID_SENSOR)
 330   3                              {
 331   4                                      result = 1; //´«¸ÐÆ÷´æÔÚ
 332   4                              }
 333   3                              else if (rxbuf[2] == RIGHT_MID_SENSOR)
 334   3                              {
 335   4                                      result = 1; //´«¸ÐÆ÷´æÔÚ
 336   4                              }
 337   3                      }
 338   2                      else
 339   2                      {
 340   3                              if (rxbuf[2] == LEFT_SENSOR)
 341   3                              {
 342   4                                      saveTotalSensorDistance[0] = rxbuf[3];
 343   4                                      result = 1; //½âÎö¾àÀë
 344   4                              }
 345   3                              else if (rxbuf[2] == LEFT_MID_SENSOR)
 346   3                              {
 347   4                                      saveTotalSensorDistance[1] = rxbuf[3];
 348   4                                      result = 1; //½âÎö¾àÀë
 349   4                              }
 350   3                              else if (rxbuf[2] == RIGHT_MID_SENSOR)
 351   3                              {
 352   4                                      saveTotalSensorDistance[2] = rxbuf[3];
 353   4                                      result = 1; //½âÎö¾àÀë
 354   4                              }
 355   3                      }
 356   2              }
 357   1              else
 358   1              {
 359   2                      if (rxbuf[1] == CMD_ID)
C51 COMPILER V9.54   UART                                                                  05/28/2022 11:17:27 PAGE 7   

 360   2                      {
 361   3                              if (rxbuf[2] == get_currentSensorID()) //ÅÐ¶ÏÊÕµ½µÄÐÅÏ¢ÊÇ·ñÐèÒª»Ø¸´£¬»Ø¸´±ØÐë´«¸ÐÆ÷ºÅ¶ÔÓ¦
 362   3                              {
 363   4                                      sensorReplyPackage(rxbuf[2], rxbuf[1]);
 364   4                                      result = 1; //´«¸ÐÆ÷´æÔÚ£¬ÐèÒª»Ø¸´ÐÅÏ¢
 365   4                              }
 366   3                      }
 367   2                      else
 368   2                      {
 369   3                              if (rxbuf[2] == get_currentSensorID()) //ÅÐ¶ÏÊÕµ½µÄÐÅÏ¢ÊÇ·ñÐèÒª»Ø¸´£¬»Ø¸´±ØÐë´«¸ÐÆ÷ºÅ¶ÔÓ¦
 370   3                              {
 371   4                                      sensorReplyPackage(rxbuf[2], rxbuf[1]);
 372   4                                      result = 1; //ÐèÒª»Ø¸´¾àÀëÐÅÏ¢
 373   4                              }
 374   3                      }
 375   2              }
 376   1              return result;
 377   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1236    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    110    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14      39
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
