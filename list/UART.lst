C51 COMPILER V9.54   UART                                                                  05/14/2022 14:52:08 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\list\UART.obj
COMPILER INVOKED BY: D:\keil\keil_C51\C51\BIN\C51.EXE UART.C OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\list\UA
                    -RT.lst) OBJECT(.\list\UART.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* Èç¹ûÒªÔÚ³ÌÐòÖÐÊ¹ÓÃ´Ë´úÂë,ÇëÔÚ³ÌÐòÖÐ×¢Ã÷Ê¹ÓÃÁËSTCµÄ×ÊÁÏ¼°³ÌÐò            */
  11          /*---------------------------------------------------------------------*/
  12          
  13          #include "Task.h"
  14          #include "timer.h"
  15          #include "Beep.h"
  16          #include "Task.h"
  17          #include "Sensor.h"
  18          #include "delay.h"
  19          #include "UART.h"
  20          #include <string.h>
  21          
  22          unsigned char xdata txBuf[14];
  23          unsigned char xdata rxbuf[COM_RX2_Lenth];
  24          unsigned char rxlen = 0;
  25          
  26          COMx_Define COM2;
  27          u8 xdata TX2_Buffer[COM_TX2_Lenth]; //·¢ËÍ»º³å
  28          u8 xdata RX2_Buffer[COM_RX2_Lenth]; //½ÓÊÕ»º³å
  29          
  30          u8 UART_Configuration(u8 UARTx, COMx_InitDefine *COMx)
  31          {
  32   1              u8 i;
  33   1              u32 j;
  34   1      
  35   1              if (UARTx == UART2)
  36   1              {
  37   2                      COM2.id = 2;
  38   2                      COM2.TX_read = 0;
  39   2                      COM2.TX_write = 0;
  40   2                      COM2.B_TX_busy = 0;
  41   2                      COM2.RX_Cnt = 0;
  42   2                      COM2.RX_TimeOut = 0;
  43   2                      COM2.B_RX_OK = 0;
  44   2                      for (i = 0; i < COM_TX2_Lenth; i++)
  45   2                              TX2_Buffer[i] = 0;
  46   2                      for (i = 0; i < COM_RX2_Lenth; i++)
  47   2                              RX2_Buffer[i] = 0;
  48   2      
  49   2                      if ((COMx->UART_Mode == UART_9bit_BRTx) || (COMx->UART_Mode == UART_8bit_BRTx)) //¿É±ä²¨ÌØÂÊ
  50   2                      {
  51   3                              if (COMx->UART_Priority > Priority_3)
  52   3                                      return 2;                                                //´íÎó
  53   3                              UART2_Priority(COMx->UART_Priority); //Ö¸¶¨ÖÐ¶ÏÓÅÏÈ¼¶(µÍµ½¸ß) Priority_0,Priority_1,Priority_2,Priority
             -_3
C51 COMPILER V9.54   UART                                                                  05/14/2022 14:52:08 PAGE 2   

  54   3                              if (COMx->UART_Mode == UART_9bit_BRTx)
  55   3                                      S2CON |= (1 << 7); // 9bit
  56   3                              else
  57   3                                      S2CON &= ~(1 << 7);                                        // 8bit
  58   3                              j = (MAIN_Fosc / 4) / COMx->UART_BaudRate; //°´1T¼ÆËã
  59   3                              if (j >= 65536UL)
  60   3                                      return 2; //´íÎó
  61   3                              j = 65536UL - j;
  62   3                              AUXR &= ~(1 << 4); // Timer stop
  63   3                              AUXR &= ~(1 << 3); // Timer2 set As Timer
  64   3                              AUXR |= (1 << 2);  // Timer2 set as 1T mode
  65   3                              TH2 = (u8)(j >> 8);
  66   3                              TL2 = (u8)j;
  67   3                              IE2 &= ~(1 << 2); //½ûÖ¹ÖÐ¶Ï
  68   3                              AUXR |= (1 << 4); // Timer run enable
  69   3                      }
  70   2                      else
  71   2                              return 2; //Ä£Ê½´íÎó
  72   2                      if (COMx->UART_Interrupt == ENABLE)
  73   2                              IE2 |= 1; //ÔÊÐíÖÐ¶Ï
  74   2                      else
  75   2                              IE2 &= ~1; //½ûÖ¹ÖÐ¶Ï
  76   2                      if (COMx->UART_RxEnable == ENABLE)
  77   2                              S2CON |= (1 << 4); //ÔÊÐí½ÓÊÕ
  78   2                      else
  79   2                              S2CON &= ~(1 << 4);                                                      //½ûÖ¹½ÓÊÕ
  80   2                      P_SW2 = (P_SW2 & ~1) | (COMx->UART_P_SW & 0x01); //ÇÐ»»IO
  81   2                      return 0;
  82   2              }
  83   1              return 2; //´íÎó
  84   1      }
  85          
  86          /*********************************************************/
  87          
  88          void UART2_int(void) interrupt UART2_VECTOR
  89          {
  90   1              if (RI2)
  91   1              {
  92   2                      CLR_RI2();
  93   2                      if (COM2.B_RX_OK == 0)
  94   2                      {
  95   3                              if (COM2.RX_Cnt >= COM_RX2_Lenth)
  96   3                                      COM2.RX_Cnt = 0;
  97   3                              RX2_Buffer[COM2.RX_Cnt++] = S2BUF;
  98   3                              COM2.RX_TimeOut = TimeOutSet2;
  99   3                      }
 100   2              }
 101   1      
 102   1              if (TI2)
 103   1              {
 104   2                      CLR_TI2();
 105   2                      if (COM2.TX_read != COM2.TX_write)
 106   2                      {
 107   3                              S2BUF = TX2_Buffer[COM2.TX_read];
 108   3                              if (++COM2.TX_read >= COM_TX2_Lenth)
 109   3                                      COM2.TX_read = 0;
 110   3                      }
 111   2                      else
 112   2                              COM2.B_TX_busy = 0;
 113   2              }
 114   1      }
 115          
C51 COMPILER V9.54   UART                                                                  05/14/2022 14:52:08 PAGE 3   

 116          /********************* UART2 º¯Êý ************************/
 117          void TX2_write2buff(u8 dat) //Ð´Èë·¢ËÍ»º³å£¬Ö¸Õë+1
 118          {
 119   1              TX2_Buffer[COM2.TX_write] = dat; //×°·¢ËÍ»º³å
 120   1              if (++COM2.TX_write >= COM_TX2_Lenth)
 121   1                      COM2.TX_write = 0;
 122   1      
 123   1              if (COM2.B_TX_busy == 0) //¿ÕÏÐ
 124   1              {
 125   2                      COM2.B_TX_busy = 1; //±êÖ¾Ã¦
 126   2                      SET_TI2();                      //´¥·¢·¢ËÍÖÐ¶Ï
 127   2              }
 128   1      }
 129          
 130          void VirtualCOM_StringSend(unsigned char *str)
 131          {
 132   1              //    while (*str != 0)
 133   1              //    {
 134   1              //        TX2_write2buff(*str);
 135   1              //        str++;
 136   1              //    }
 137   1      }
*** WARNING C280 IN LINE 130 OF UART.C: 'str': unreferenced local variable
 138          
 139          /***************  ´®¿Ú³õÊ¼»¯º¯Êý *****************/
 140          void UART_config(void)
 141          {
 142   1              COMx_InitDefine COMx_InitStructure;                              //½á¹¹¶¨Òå
 143   1              COMx_InitStructure.UART_Mode = UART_8bit_BRTx;   //Ä£Ê½,   UART_ShiftRight,UART_8bit_BRTx,UART_9bit,UART_9
             -bit_BRTx
 144   1                                                                                                               //     COMx_InitStructure.UART_BRT_Use   = BRT_Timer2;                 //Ñ¡Ôñ²¨ÌØÂÊ·¢ÉúÆ÷, BRT_Timer2 (×¢Òâ: ´
             -®¿Ú2¹Ì¶¨Ê¹ÓÃBRT_Timer2, ËùÒÔ²»ÓÃÑ¡Ôñ)
 145   1              COMx_InitStructure.UART_BaudRate = 115200ul;             //²¨ÌØÂÊ,     110 ~ 115200
 146   1              COMx_InitStructure.UART_RxEnable = ENABLE;               //½ÓÊÕÔÊÐí,   ENABLE»òDISABLE
 147   1              COMx_InitStructure.UART_Interrupt = ENABLE;              //ÖÐ¶ÏÔÊÐí,   ENABLE»òDISABLE
 148   1              COMx_InitStructure.UART_Priority = Priority_0;   //Ö¸¶¨ÖÐ¶ÏÓÅÏÈ¼¶(µÍµ½¸ß) Priority_0,Priority_1,Priority_2
             -,Priority_3
 149   1              COMx_InitStructure.UART_P_SW = UART2_SW_P10_P11; //ÇÐ»»¶Ë¿Ú,   UART2_SW_P10_P11,UART2_SW_P46_P47
 150   1              UART_Configuration(UART2, &COMx_InitStructure);  //³õÊ¼»¯´®¿Ú2 UART1,UART2,UART3,UART4
 151   1      
 152   1              UART_CHG_IO = UART_RX_EN;
 153   1      }
 154          
 155          //Çå³ý½ÓÊÕ»º´æ
 156          void clrRX2_Buffer(void)
 157          {
 158   1              COM2.RX_Cnt = 0;
 159   1              COM2.RX_TimeOut = 0;
 160   1              COM2.B_RX_OK = 0;
 161   1              memset(RX2_Buffer, 0, COM_TX2_Lenth);
 162   1      }
 163          
 164          //»ñÈ¡½ÓÊÕµ½µÄÊý¾Ý 0:Î´ÊÕµ½ÓÐÐ§Êý¾Ý
 165          unsigned char getRxBuf(void)
 166          {
 167   1              rxlen = COM2.RX_Cnt;
 168   1              if (rxlen == 4 || rxlen == 5) //Ä¿Ç°Ö»ÓÐÁ½ÖÖÐ­Òé
 169   1              {
 170   2                      memcpy(rxbuf, RX2_Buffer, rxlen);
 171   2                      return rxlen;
 172   2              }
 173   1              else
C51 COMPILER V9.54   UART                                                                  05/14/2022 14:52:08 PAGE 4   

 174   1                      return 0;
 175   1      }
 176          
 177          void uartSendBuf(unsigned char *buf, unsigned char len)
 178          {
 179   1              unsigned char i = 0;
 180   1              clrRX2_Buffer();
 181   1              UART_CHG_IO = UART_TX_EN;
 182   1              _nop_();
 183   1              _nop_();
 184   1              _nop_();
 185   1              _nop_();
 186   1              for (i = 0; i < len; i++)
 187   1              {
 188   2                      TX2_write2buff(buf[i]);
 189   2              }
 190   1              _nop_();
 191   1              _nop_();
 192   1              _nop_();
 193   1              _nop_();
 194   1              UART_CHG_IO = UART_RX_EN;
 195   1      }
 196          
 197          void sensorReplyPackage(unsigned char ch, unsigned char cmd)
 198          {
 199   1              unsigned char temp_txLen = 0;
 200   1              if(cmd == CMD_ID)
 201   1              {
 202   2                      txBuf[0] = 0xBB;
 203   2                      txBuf[1] = cmd;
 204   2                      txBuf[2] = ch;
 205   2                      txBuf[3] = 0xBF;
 206   2                      temp_txLen = 4;
 207   2              }
 208   1              else
 209   1              {
 210   2                      txBuf[0] = 0xBB;
 211   2                      txBuf[1] = cmd;
 212   2                      txBuf[2] = ch;
 213   2                      txBuf[3] = Get_meterDistance()/10;
 214   2                      txBuf[4] = 0xBF;        
 215   2                      temp_txLen = 5; 
 216   2              }
 217   1              uartSendBuf(txBuf,temp_txLen);
 218   1      }
 219          
 220          unsigned char saveTotalSensorDistance[SENSOR_NUM_MAX] = {0}; //Ë³Ðò·Ö±ð´ú±í£º×ó£¬×óÖÐ£¬ÓÒÖÐ£¬ÓÒ
 221          
 222          // cmd 0:ÓÒ´«¸ÐÆ÷Ñ­»·»ñÈ¡ÆäËû´«¸ÐÆ÷Î»ÖÃÐÅÏ¢ 1:ÓÒ´«¸ÐÆ÷Ñ­»·»ñÈ¡ÆäËû´«¸ÐÆ÷¾àÀëÐÅÏ¢
 223          // ch ¸ù¾Ýºê¶¨ÒåÀ´
 224          void getSensorImfo(unsigned char ch, unsigned char cmd)
 225          {
 226   1              txBuf[0] = 0xBB;
 227   1              txBuf[1] = cmd;
 228   1              txBuf[2] = ch;
 229   1              txBuf[3] = 0xBF;
 230   1              uartSendBuf(txBuf, 3);
 231   1      }
 232          
 233          //½ÓÊÕÊý¾Ý½âÎöº¯Êý
 234          // buf:½ÓÊÕÊý¾ÝÖ¸Õë
 235          // len:½ÓÊÕÊý¾Ý³¤¶È
C51 COMPILER V9.54   UART                                                                  05/14/2022 14:52:08 PAGE 5   

 236          //¸ñÊ½£ºBB + cmd + ch + distance(BYTE) + BF
 237          unsigned char analysisSensorImfo(void)
 238          {
 239   1              unsigned char result = 0;
 240   1              if (get_currentSensorID() == RIGHT_SENSOR)
 241   1              {
 242   2                      if (rxbuf[1] == CMD_ID)
 243   2                      {
 244   3                              if (rxbuf[2] == LEFT_SENSOR)
 245   3                              {
 246   4                                      result = 1;//´«¸ÐÆ÷´æÔÚ
 247   4                              }
 248   3                              else if (rxbuf[2] == LEFT_MID_SENSOR)
 249   3                              {
 250   4                                      result = 1;//´«¸ÐÆ÷´æÔÚ
 251   4                              }
 252   3                              else if (rxbuf[2] == RIGHT_MID_SENSOR)
 253   3                              {
 254   4                                      result = 1;//´«¸ÐÆ÷´æÔÚ
 255   4                              }
 256   3                      }
 257   2                      else
 258   2                      {
 259   3                              if (rxbuf[2] == LEFT_SENSOR)
 260   3                              {
 261   4                                      saveTotalSensorDistance[0] = rxbuf[3] ;
 262   4                                      result = 1;//½âÎö¾àÀë
 263   4                              }
 264   3                              else if (rxbuf[2] == LEFT_MID_SENSOR)
 265   3                              {
 266   4                                      saveTotalSensorDistance[1] = rxbuf[3] ;
 267   4                                      result = 1;//½âÎö¾àÀë
 268   4                              }
 269   3                              else if (rxbuf[2] == RIGHT_MID_SENSOR)
 270   3                              {
 271   4                                      saveTotalSensorDistance[2] = rxbuf[3] ;
 272   4                                      result = 1;//½âÎö¾àÀë
 273   4                              }
 274   3                      }
 275   2              }
 276   1              else
 277   1              {
 278   2                      if (rxbuf[1] == CMD_ID)
 279   2                      {
 280   3                              if (rxbuf[2] == get_currentSensorID()) //ÅÐ¶ÏÊÕµ½µÄÐÅÏ¢ÊÇ·ñÐèÒª»Ø¸´£¬»Ø¸´±ØÐë´«¸ÐÆ÷ºÅ¶ÔÓ¦
 281   3                              {
 282   4                                      sensorReplyPackage(rxbuf[2] ,rxbuf[1]);
 283   4                                      result = 1;//´«¸ÐÆ÷´æÔÚ£¬ÐèÒª»Ø¸´ÐÅÏ¢
 284   4                              }
 285   3                      }
 286   2                      else
 287   2                      {
 288   3                              if (rxbuf[2] == get_currentSensorID()) //ÅÐ¶ÏÊÕµ½µÄÐÅÏ¢ÊÇ·ñÐèÒª»Ø¸´£¬»Ø¸´±ØÐë´«¸ÐÆ÷ºÅ¶ÔÓ¦
 289   3                              {
 290   4                                      sensorReplyPackage(rxbuf[2] ,rxbuf[1]);
 291   4                                      result = 1;//ÐèÒª»Ø¸´¾àÀëÐÅÏ¢
 292   4                              }
 293   3                      }
 294   2              }
 295   1              return result;
 296   1      }

C51 COMPILER V9.54   UART                                                                  05/14/2022 14:52:08 PAGE 6   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    852    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    110    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12      27
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
