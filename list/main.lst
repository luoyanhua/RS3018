C51 COMPILER V9.54   MAIN                                                                  03/01/2022 19:48:48 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\list\main.obj
COMPILER INVOKED BY: D:\Program Files\keil_C51\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(
                    -.\list\main.lst) OBJECT(.\list\main.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
  11          /*---------------------------------------------------------------------*/
  12          
  13          #include "config.h"
  14          #include "GPIO.h"
  15          #include "UART.h"
  16          #include "delay.h"
  17          #include "WDT.h"
  18          #include "timer.h"
  19          #include "Sensor.h"
  20          #include "Beep.h"
  21          #include "Task.h"
  22          #include "Exti.h"
  23          
  24          /*************   功能说明   ***************
  25          
  26          本例程基于STC8G1K08-QFN20进行编写测试
  27          
  28          PCA0  使用定时器0获得40KHz输出
  29          捕获脉宽时间=捕捉的时钟数/PCA时钟源, 比如 捕捉的时钟数 = 256, PCA时钟源 = 20MHz(1T), 脉宽 = 256/20MHz = 12
             -.8us. 
  30          下载时, 选择时钟 20MHz (用户可在"config.h"修改频率).
  31          
  32          ******************************************/
  33          
  34          /*************  本地常量声明    **************/
  35          
  36          /*************  本地变量声明    **************/
  37          
  38          /*************  本地函数声明    **************/
  39          
  40          /*************  外部函数和变量声明 *****************/
  41          
  42          /******************** IO口配置 ********************/
  43          void GPIO_config(void)
  44          {
  45   1              GPIO_InitTypeDef GPIO_InitStructure; //结构定义
  46   1      
  47   1              GPIO_InitStructure.Pin = GPIO_Pin_All;          //指定要初始化的IO, GPIO_Pin_0 ~ GPIO_Pin_7, 或操作
  48   1              GPIO_InitStructure.Mode = GPIO_PullUp;          //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_
             -OUT_PP
  49   1              GPIO_Inilize(GPIO_P1, &GPIO_InitStructure); //初始化
  50   1      
  51   1              GPIO_InitStructure.Pin = GPIO_Pin_All;          //指定要初始化的IO, GPIO_Pin_0 ~ GPIO_Pin_7, 或操作
  52   1              GPIO_InitStructure.Mode = GPIO_PullUp;          //指定IO的输入或输出方式,GPIO_PullUp,GPIO_HighZ,GPIO_OUT_OD,GPIO_
C51 COMPILER V9.54   MAIN                                                                  03/01/2022 19:48:48 PAGE 2   

             -OUT_PP
  53   1              GPIO_Inilize(GPIO_P3, &GPIO_InitStructure); //初始化
  54   1      }
  55          
  56          /***************  串口初始化函数 *****************/
  57          void UART_config(void)
  58          {
  59   1      }
  60          
  61          /************************ 定时器配置 ****************************/
  62          void Timer_config(void)
  63          {
  64   1              TIM_InitTypeDef TIM_InitStructure;                                                         //结构定义
  65   1              TIM_InitStructure.TIM_Mode = TIM_16BitAutoReload;                          //指定工作模式,   TIM_16BitAutoReload,TIM_16Bit,TI
             -M_8BitAutoReload,TIM_16BitAutoReloadNoMask
  66   1              TIM_InitStructure.TIM_Priority = Priority_0;                               //指定中断优先级(低到高) Priority_0,Priority_1,Priorit
             -y_2,Priority_3
  67   1              TIM_InitStructure.TIM_Interrupt = ENABLE;                                          //中断是否允许,   ENABLE或DISABLE
  68   1              TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_1T;                            //指定时钟源,     TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CL
             -OCK_Ext
  69   1              TIM_InitStructure.TIM_ClkOut = DISABLE;                                            //是否输出高速脉冲, ENABLE或DISABLE
  70   1              TIM_InitStructure.TIM_Value = 65536UL - (MAIN_Fosc / 80000UL); //初值,    80KHz   12.5us中断一次
  71   1              TIM_InitStructure.TIM_Run = ENABLE;                                                        //是否初始化后启动定时器, ENABLE或DISABLE
  72   1              Timer_Inilize(Timer0, &TIM_InitStructure);                                         //初始化Timer0         Timer0,Timer1,Timer2,Timer3,Timer4
  73   1      
  74   1              TIM_InitStructure.TIM_Mode = TIM_16BitAutoReload;                         //指定工作模式,   TIM_16BitAutoReload,TIM_16Bit,TIM
             -_8BitAutoReload,TIM_16BitAutoReloadNoMask
  75   1              TIM_InitStructure.TIM_Priority = Priority_0;                              //指定中断优先级(低到高) Priority_0,Priority_1,Priority
             -_2,Priority_3
  76   1              TIM_InitStructure.TIM_Interrupt = ENABLE;                                         //中断是否允许,   ENABLE或DISABLE
  77   1              TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_1T;                           //指定时钟源, TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLOCK_E
             -xt
  78   1              TIM_InitStructure.TIM_ClkOut = DISABLE;                                           //是否输出高速脉冲, ENABLE或DISABLE
  79   1              TIM_InitStructure.TIM_Value = 65536UL - (MAIN_Fosc / 2000UL); //初值,    2KHz   0.5mS中断一次
  80   1              TIM_InitStructure.TIM_Run = ENABLE;                                                       //是否初始化后启动定时器, ENABLE或DISABLE
  81   1              Timer_Inilize(Timer1, &TIM_InitStructure);                                        //初始化Timer1          Timer0,Timer1,Timer2,Timer3,Timer4
  82   1      }
  83          
  84          /******************** INT配置 ********************/
  85          void Exti_config(void)
  86          {
  87   1              EXTI_InitTypeDef Exti_InitStructure; //结构定义
  88   1      
  89   1              Exti_InitStructure.EXTI_Interrupt = ENABLE;        //中断使能,   ENABLE或DISABLE
  90   1              Exti_InitStructure.EXTI_Mode = EXT_MODE_Fall;  //中断模式,   EXT_MODE_RiseFall,EXT_MODE_Fall
  91   1              Exti_InitStructure.EXTI_Priority = Priority_0; //指定中断优先级(低到高) Priority_0,Priority_1,Priority_2,
             -Priority_3
  92   1              Ext_Inilize(EXT_INT1, &Exti_InitStructure);        //初始化
  93   1      }
  94          
  95          /******************** WDT配置 ********************/
  96          void WDT_config(void)
  97          {
  98   1              WDT_InitTypeDef WDT_InitStructure; //结构定义
  99   1      
 100   1              WDT_InitStructure.WDT_Enable = ENABLE;                   //中断使能   ENABLE或DISABLE
 101   1              WDT_InitStructure.WDT_IDLE_Mode = WDT_IDLE_STOP; //IDLE模式是否停止计数         WDT_IDLE_STOP,WDT_IDLE_RUN
 102   1              WDT_InitStructure.WDT_PS = WDT_SCALE_16;                 //看门狗定时器时钟分频系数             WDT_SCALE_2,WDT_SCALE_4,WDT_SCALE_
             -8,WDT_SCALE_16,WDT_SCALE_32,WDT_SCALE_64,WDT_SCALE_128,WDT_SCALE_256
 103   1              WDT_Inilize(&WDT_InitStructure);                                 //初始化
 104   1      }
 105          
C51 COMPILER V9.54   MAIN                                                                  03/01/2022 19:48:48 PAGE 3   

 106          /******************** task A **************************/
 107          void main(void)
 108          {
 109   1              GPIO_config();
 110   1              UART_config();
 111   1              Timer_config();
 112   1              WDT_config();
 113   1              Exti_config();
 114   1              EA = 1;
 115   1      
 116   1              VirtualCOM_StringSend("STC8 UART2 OK!\r\n"); //UART1发送一个字符串
 117   1      
 118   1              while (1)
 119   1              {
 120   2                      AppTask();                      //总流程处理任务
 121   2                      BeepAlarmTask();        //蜂鸣器报警任务
 122   2                      SendOncePlusTask(); //发送脉冲群任务
 123   2                      WDT_Clear();            // 喂狗
 124   2              }
 125   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    170    ----
   CONSTANT SIZE    =     17    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
